generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Listing {
  id               String        @id
  userId           String
  title            String
  description      String
  rent             Int
  genderPreference String
  city             String
  location         String?
  availableFrom    DateTime
  availableMonths  Int
  imageUrls        String[]
  isPrivate        Boolean       @default(false)
  status           ListingStatus @default(PENDING)
  approvedAt       DateTime?
  rejectedAt       DateTime?
  rejectionReason  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  reviews          Review[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Message {
  id                            String   @id
  senderId                      String
  receiverId                    String
  content                       String
  createdAt                     DateTime @default(now())
  User_Message_receiverIdToUser User     @relation("Message_receiverIdToUser", fields: [receiverId], references: [id])
  User_Message_senderIdToUser   User     @relation("Message_senderIdToUser", fields: [senderId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Review {
  id        String   @id
  userId    String
  listingId String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                               String               @id
  name                             String
  email                            String               @unique
  password                         String
  role                             Role                 @default(USER)
  gender                           String
  budget                           Int?
  city                             String
  university                       String?
  profession                       String?
  profilePicture                   String?
  isVerified                       Boolean              @default(false)
  privateProfile                   Boolean              @default(false)
  createdAt                        DateTime             @default(now())
  Account                          Account[]
  listings                         Listing[]
  Message_Message_receiverIdToUser Message[]            @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]            @relation("Message_senderIdToUser")
  reviews                          Review[]
  Session                          Session[]
  VerificationRequest              VerificationRequest?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VerificationRequest {
  id        String             @id
  userId    String             @unique
  cnicUrl   String
  videoUrl  String
  status    VerificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  User      User               @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}
