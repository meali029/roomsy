generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(uuid())
  name             String
  email            String               @unique
  password         String
  role             Role                 @default(USER)
  gender           String
  budget           Int?
  city             String
  university       String?
  profession       String?
  profilePicture   String?
  isVerified       Boolean              @default(false)
  privateProfile   Boolean              @default(false)
  createdAt        DateTime             @default(now())
  Account          Account[]
  listings         Listing[]
  receivedMessages Message[]            @relation("ReceivedMessages")
  sentMessages     Message[]            @relation("SentMessages")
  reviews          Review[]
  Session          Session[]
  verification     VerificationRequest?
}

model Listing {
  id               String   @id @default(uuid())
  userId           String
  title            String
  description      String
  rent             Int
  genderPreference String
  city             String
  location         String?
  availableFrom    DateTime
  availableMonths  Int
  imageUrls        String[]
  isPrivate        Boolean  @default(false)
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  reviews          Review[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id        String             @id @default(uuid())
  userId    String             @unique
  cnicUrl   String
  videoUrl  String
  status    VerificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
