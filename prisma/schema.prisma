generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  role            Role     @default(USER)
  gender          String
  budget          Int?
  city            String
  university      String?  
  profession      String?  
  profilePicture  String?
  isVerified      Boolean  @default(false)
  privateProfile  Boolean  @default(false)
  createdAt       DateTime @default(now())

  listings        Listing[]
  reviews         Review[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  verification    VerificationRequest?
  accounts        Account[]
  sessions        Session[]
}

model Listing {
  id               String   @id @default(uuid())
  userId           String
  title            String
  description      String
  rent             Int
  genderPreference String
  city             String
  location         String?
  availableFrom    DateTime
  availableMonths  Int
  imageUrls        String[]
  isPrivate        Boolean  @default(false)
  createdAt        DateTime @default(now())

  user             User     @relation(fields: [userId], references: [id])
  reviews          Review[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  content   String
  rating    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(uuid())
  userId     String   @unique
  cnicUrl    String
  videoUrl   String
  status     VerificationStatus @default(PENDING)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
